export function Pi(): number;
declare function radiansFromDegrees_1(deg: any): number;
export const radiansFromDegrees: typeof radiansFromDegrees_1;
declare function degreesFromRadians_1(rad: any): number;
export const degreesFromRadians: typeof degreesFromRadians_1;
declare function arrayMin_1(arr: any, offset?: number, stride?: number): number;
export const arrayMin: typeof arrayMin_1;
declare function arrayMax_1(arr: any, offset?: number, stride?: number): number;
export const arrayMax: typeof arrayMax_1;
declare function arrayRange_1(arr: any, offset?: number, stride?: number): number[];
export const arrayRange: typeof arrayRange_1;
export function ceilLog2(): any;
export function factorial(): any;
declare function nearestPowerOfTwo_1(xi: any): number;
export const nearestPowerOfTwo: typeof nearestPowerOfTwo_1;
declare function isPowerOfTwo_1(x: any): boolean;
export const isPowerOfTwo: typeof isPowerOfTwo_1;
declare function binomial_1(m: any, n: any): number;
export const binomial: typeof binomial_1;
declare function beginCombination_1(m: any, n: any): number | number[];
export const beginCombination: typeof beginCombination_1;
declare function nextCombination_1(m: any, n: any, r: any): number;
export const nextCombination: typeof nextCombination_1;
declare function randomSeed_1(seed: any): void;
export const randomSeed: typeof randomSeed_1;
declare function getSeed_1(): number;
export const getSeed: typeof getSeed_1;
declare function random_1(minValue?: number, maxValue?: number): number;
export const random: typeof random_1;
export function gaussian(): any;
declare function add_1(a: any, b: any, out: any): any;
export const add: typeof add_1;
declare function subtract_1(a: any, b: any, out: any): any;
export const subtract: typeof subtract_1;
declare function multiplyScalar_1(vec: any, scalar: any): any;
export const multiplyScalar: typeof multiplyScalar_1;
declare function multiplyScalar2D_1(vec: any, scalar: any): any;
export const multiplyScalar2D: typeof multiplyScalar2D_1;
declare function multiplyAccumulate_1(a: any, b: any, scalar: any, out: any): any;
export const multiplyAccumulate: typeof multiplyAccumulate_1;
declare function multiplyAccumulate2D_1(a: any, b: any, scalar: any, out: any): any;
export const multiplyAccumulate2D: typeof multiplyAccumulate2D_1;
declare function dot_1(x: any, y: any): number;
export const dot: typeof dot_1;
declare function outer_1(x: any, y: any, out_3x3: any): void;
export const outer: typeof outer_1;
declare function cross_1(x: any, y: any, out: any): any;
export const cross: typeof cross_1;
declare function norm_1(x: any, n?: number): number;
export const norm: typeof norm_1;
declare function normalize_1(x: any): number;
export const normalize: typeof normalize_1;
declare function perpendiculars_1(x: any, y: any, z: any, theta: any): void;
export const perpendiculars: typeof perpendiculars_1;
declare function projectVector_1(a: any, b: any, projection: any): boolean;
export const projectVector: typeof projectVector_1;
declare function dot2D_1(x: any, y: any): number;
export const dot2D: typeof dot2D_1;
declare function projectVector2D_1(a: any, b: any, projection: any): boolean;
export const projectVector2D: typeof projectVector2D_1;
declare function distance2BetweenPoints_1(x: any, y: any): number;
export const distance2BetweenPoints: typeof distance2BetweenPoints_1;
declare function angleBetweenVectors_1(v1: any, v2: any): number;
export const angleBetweenVectors: typeof angleBetweenVectors_1;
declare function gaussianAmplitude_1(mean: any, variance: any, position: any): number;
export const gaussianAmplitude: typeof gaussianAmplitude_1;
declare function gaussianWeight_1(mean: any, variance: any, position: any): number;
export const gaussianWeight: typeof gaussianWeight_1;
declare function outer2D_1(x: any, y: any, out_2x2: any): void;
export const outer2D: typeof outer2D_1;
declare function norm2D_1(x2D: any): number;
export const norm2D: typeof norm2D_1;
declare function normalize2D_1(x: any): number;
export const normalize2D: typeof normalize2D_1;
declare function determinant2x2_1(...args: any[]): number;
export const determinant2x2: typeof determinant2x2_1;
declare function LUFactor3x3_1(mat_3x3: any, index_3: any): void;
export const LUFactor3x3: typeof LUFactor3x3_1;
declare function LUSolve3x3_1(mat_3x3: any, index_3: any, x_3: any): void;
export const LUSolve3x3: typeof LUSolve3x3_1;
declare function linearSolve3x3_1(mat_3x3: any, x_3: any, y_3: any): void;
export const linearSolve3x3: typeof linearSolve3x3_1;
declare function multiply3x3_vect3_1(mat_3x3: any, in_3: any, out_3: any): void;
export const multiply3x3_vect3: typeof multiply3x3_vect3_1;
declare function multiply3x3_mat3_1(a_3x3: any, b_3x3: any, out_3x3: any): void;
export const multiply3x3_mat3: typeof multiply3x3_mat3_1;
declare function multiplyMatrix_1(a: any, b: any, rowA: any, colA: any, rowB: any, colB: any, out_rowXcol: any): void;
export const multiplyMatrix: typeof multiplyMatrix_1;
declare function transpose3x3_1(in_3x3: any, outT_3x3: any): void;
export const transpose3x3: typeof transpose3x3_1;
declare function invert3x3_1(in_3x3: any, outI_3x3: any): void;
export const invert3x3: typeof invert3x3_1;
declare function identity3x3_1(mat_3x3: any): void;
export const identity3x3: typeof identity3x3_1;
declare function determinant3x3_1(mat_3x3: any): number;
export const determinant3x3: typeof determinant3x3_1;
declare function quaternionToMatrix3x3_1(quat_4: any, mat_3x3: any): void;
export const quaternionToMatrix3x3: typeof quaternionToMatrix3x3_1;
declare function areMatricesEqual_1(matA: any, matB: any): any;
export const areMatricesEqual: typeof areMatricesEqual_1;
declare function jacobiN_1(a: any, n: any, w: any, v: any): number | number;
export const jacobiN: typeof jacobiN_1;
declare function matrix3x3ToQuaternion_1(mat_3x3: any, quat_4: any): void;
export const matrix3x3ToQuaternion: typeof matrix3x3ToQuaternion_1;
declare function multiplyQuaternion_1(quat_1: any, quat_2: any, quat_out: any): void;
export const multiplyQuaternion: typeof multiplyQuaternion_1;
declare function orthogonalize3x3_1(a_3x3: any, out_3x3: any): void;
export const orthogonalize3x3: typeof orthogonalize3x3_1;
declare function diagonalize3x3_1(a_3x3: any, w_3: any, v_3x3: any): void;
export const diagonalize3x3: typeof diagonalize3x3_1;
declare function singularValueDecomposition3x3_1(a_3x3: any, u_3x3: any, w_3: any, vT_3x3: any): void;
export const singularValueDecomposition3x3: typeof singularValueDecomposition3x3_1;
declare function luFactorLinearSystem_1(A: any, index: any, size: any): number | number;
export const luFactorLinearSystem: typeof luFactorLinearSystem_1;
declare function luSolveLinearSystem_1(A: any, index: any, x: any, size: any): void;
export const luSolveLinearSystem: typeof luSolveLinearSystem_1;
declare function solveLinearSystem_1(A: any, x: any, size: any): number | number;
export const solveLinearSystem: typeof solveLinearSystem_1;
declare function invertMatrix_1(A: any, AI: any, size: any, index?: any, column?: any): number | number;
export const invertMatrix: typeof invertMatrix_1;
declare function estimateMatrixCondition_1(A: any, size: any): number;
export const estimateMatrixCondition: typeof estimateMatrixCondition_1;
declare function jacobi_1(a_3x3: any, w: any, v: any): number | number;
export const jacobi: typeof jacobi_1;
declare function solveHomogeneousLeastSquares_1(numberOfSamples: any, xt: any, xOrder: any, mt: any): number | number;
export const solveHomogeneousLeastSquares: typeof solveHomogeneousLeastSquares_1;
declare function solveLeastSquares_1(numberOfSamples: any, xt: any, xOrder: any, yt: any, yOrder: any, mt: any, checkHomogeneous?: boolean): number | number;
export const solveLeastSquares: typeof solveLeastSquares_1;
declare function hex2float_1(hexStr: any, outFloatArray?: number[]): number[];
export const hex2float: typeof hex2float_1;
declare function rgb2hsv_1(rgb: any, hsv: any): void;
export const rgb2hsv: typeof rgb2hsv_1;
declare function hsv2rgb_1(hsv: any, rgb: any): void;
export const hsv2rgb: typeof hsv2rgb_1;
declare function lab2xyz_1(lab: any, xyz: any): void;
export const lab2xyz: typeof lab2xyz_1;
declare function xyz2lab_1(xyz: any, lab: any): void;
export const xyz2lab: typeof xyz2lab_1;
declare function xyz2rgb_1(xyz: any, rgb: any): void;
export const xyz2rgb: typeof xyz2rgb_1;
declare function rgb2xyz_1(rgb: any, xyz: any): void;
export const rgb2xyz: typeof rgb2xyz_1;
declare function rgb2lab_1(rgb: any, lab: any): void;
export const rgb2lab: typeof rgb2lab_1;
declare function lab2rgb_1(lab: any, rgb: any): void;
export const lab2rgb: typeof lab2rgb_1;
declare function uninitializeBounds_1(bounds: any): void;
export const uninitializeBounds: typeof uninitializeBounds_1;
declare function areBoundsInitialized_1(bounds: any): boolean;
export const areBoundsInitialized: typeof areBoundsInitialized_1;
declare function computeBoundsFromPoints_1(point1: any, point2: any, bounds: any): void;
export const computeBoundsFromPoints: typeof computeBoundsFromPoints_1;
declare function clampValue_1(value: any, minValue: any, maxValue: any): any;
export const clampValue: typeof clampValue_1;
declare function clampVector_1(vector: any, minVector: any, maxVector: any, out?: any[]): any[];
export const clampVector: typeof clampVector_1;
declare function roundVector_1(vector: any, out?: any[]): any[];
export const roundVector: typeof roundVector_1;
declare function clampAndNormalizeValue_1(value: any, range: any): number;
export const clampAndNormalizeValue: typeof clampAndNormalizeValue_1;
export function getScalarTypeFittingRange(): any;
export function getAdjustedScalarRange(): any;
declare function extentIsWithinOtherExtent_1(extent1: any, extent2: any): number | number;
export const extentIsWithinOtherExtent: typeof extentIsWithinOtherExtent_1;
declare function boundsIsWithinOtherBounds_1(bounds1_6: any, bounds2_6: any, delta_3: any): number | number;
export const boundsIsWithinOtherBounds: typeof boundsIsWithinOtherBounds_1;
declare function pointIsWithinBounds_1(point_3: any, bounds_6: any, delta_3: any): number | number;
export const pointIsWithinBounds: typeof pointIsWithinBounds_1;
declare function solve3PointCircle_1(p1: any, p2: any, p3: any, center: any): number;
export const solve3PointCircle: typeof solve3PointCircle_1;
export const inf: number;
export const negInf: number;
export function isInf(value: any): boolean;
export function isNan(number: any): boolean;
declare function createUninitializedBounds_1(): any[];
export const createUninitializedBounds: typeof createUninitializedBounds_1;
declare function getMajorAxisIndex_1(vector: any): number;
export const getMajorAxisIndex: typeof getMajorAxisIndex_1;
declare function floatToHex2_1(value: any): string;
export const floatToHex2: typeof floatToHex2_1;
declare function floatRGB2HexCode_1(rgbArray: any, prefix?: string): string;
export const floatRGB2HexCode: typeof floatRGB2HexCode_1;
declare function float2CssRGBA_1(rgbArray: any): string;
export const float2CssRGBA: typeof float2CssRGBA_1;
declare function rotateVector_1(vectorToBeRotated: any, axis: any, angle: any): number[];
export const rotateVector: typeof rotateVector_1;
export interface T100 {
  Pi: () => number;
  radiansFromDegrees: typeof radiansFromDegrees_1;
  degreesFromRadians: typeof degreesFromRadians_1;
  round: (x: number) => number;
  floor: (x: number) => number;
  ceil: (x: number) => number;
  ceilLog2: () => any;
  min: (...values: number[]) => number;
  max: (...values: number[]) => number;
  arrayMin: typeof arrayMin_1;
  arrayMax: typeof arrayMax_1;
  arrayRange: typeof arrayRange_1;
  isPowerOfTwo: typeof isPowerOfTwo_1;
  nearestPowerOfTwo: typeof nearestPowerOfTwo_1;
  factorial: () => any;
  binomial: typeof binomial_1;
  beginCombination: typeof beginCombination_1;
  nextCombination: typeof nextCombination_1;
  randomSeed: typeof randomSeed_1;
  getSeed: typeof getSeed_1;
  random: typeof random_1;
  gaussian: () => any;
  add: typeof add_1;
  subtract: typeof subtract_1;
  multiplyScalar: typeof multiplyScalar_1;
  multiplyScalar2D: typeof multiplyScalar2D_1;
  multiplyAccumulate: typeof multiplyAccumulate_1;
  multiplyAccumulate2D: typeof multiplyAccumulate2D_1;
  dot: typeof dot_1;
  outer: typeof outer_1;
  cross: typeof cross_1;
  norm: typeof norm_1;
  normalize: typeof normalize_1;
  perpendiculars: typeof perpendiculars_1;
  projectVector: typeof projectVector_1;
  projectVector2D: typeof projectVector2D_1;
  distance2BetweenPoints: typeof distance2BetweenPoints_1;
  angleBetweenVectors: typeof angleBetweenVectors_1;
  gaussianAmplitude: typeof gaussianAmplitude_1;
  gaussianWeight: typeof gaussianWeight_1;
  dot2D: typeof dot2D_1;
  outer2D: typeof outer2D_1;
  norm2D: typeof norm2D_1;
  normalize2D: typeof normalize2D_1;
  determinant2x2: typeof determinant2x2_1;
  LUFactor3x3: typeof LUFactor3x3_1;
  LUSolve3x3: typeof LUSolve3x3_1;
  linearSolve3x3: typeof linearSolve3x3_1;
  multiply3x3_vect3: typeof multiply3x3_vect3_1;
  multiply3x3_mat3: typeof multiply3x3_mat3_1;
  multiplyMatrix: typeof multiplyMatrix_1;
  transpose3x3: typeof transpose3x3_1;
  invert3x3: typeof invert3x3_1;
  identity3x3: typeof identity3x3_1;
  determinant3x3: typeof determinant3x3_1;
  quaternionToMatrix3x3: typeof quaternionToMatrix3x3_1;
  areMatricesEqual: typeof areMatricesEqual_1;
  matrix3x3ToQuaternion: typeof matrix3x3ToQuaternion_1;
  multiplyQuaternion: typeof multiplyQuaternion_1;
  orthogonalize3x3: typeof orthogonalize3x3_1;
  diagonalize3x3: typeof diagonalize3x3_1;
  singularValueDecomposition3x3: typeof singularValueDecomposition3x3_1;
  solveLinearSystem: typeof solveLinearSystem_1;
  invertMatrix: typeof invertMatrix_1;
  luFactorLinearSystem: typeof luFactorLinearSystem_1;
  luSolveLinearSystem: typeof luSolveLinearSystem_1;
  estimateMatrixCondition: typeof estimateMatrixCondition_1;
  jacobi: typeof jacobi_1;
  jacobiN: typeof jacobiN_1;
  solveHomogeneousLeastSquares: typeof solveHomogeneousLeastSquares_1;
  solveLeastSquares: typeof solveLeastSquares_1;
  hex2float: typeof hex2float_1;
  rgb2hsv: typeof rgb2hsv_1;
  hsv2rgb: typeof hsv2rgb_1;
  lab2xyz: typeof lab2xyz_1;
  xyz2lab: typeof xyz2lab_1;
  xyz2rgb: typeof xyz2rgb_1;
  rgb2xyz: typeof rgb2xyz_1;
  rgb2lab: typeof rgb2lab_1;
  lab2rgb: typeof lab2rgb_1;
  uninitializeBounds: typeof uninitializeBounds_1;
  areBoundsInitialized: typeof areBoundsInitialized_1;
  computeBoundsFromPoints: typeof computeBoundsFromPoints_1;
  clampValue: typeof clampValue_1;
  clampVector: typeof clampVector_1;
  clampAndNormalizeValue: typeof clampAndNormalizeValue_1;
  getScalarTypeFittingRange: () => any;
  getAdjustedScalarRange: () => any;
  extentIsWithinOtherExtent: typeof extentIsWithinOtherExtent_1;
  boundsIsWithinOtherBounds: typeof boundsIsWithinOtherBounds_1;
  pointIsWithinBounds: typeof pointIsWithinBounds_1;
  solve3PointCircle: typeof solve3PointCircle_1;
  inf: number;
  negInf: number;
  isInf: (value: any) => boolean;
  isNan: (number: any) => boolean;
  isNaN: (number: any) => boolean;
  isFinite: (number: any) => boolean;
  createUninitializedBounds: typeof createUninitializedBounds_1;
  getMajorAxisIndex: typeof getMajorAxisIndex_1;
  floatToHex2: typeof floatToHex2_1;
  floatRGB2HexCode: typeof floatRGB2HexCode_1;
  float2CssRGBA: typeof float2CssRGBA_1;
  rotateVector: typeof rotateVector_1;
}
declare const T101: T100;
export default T101;
