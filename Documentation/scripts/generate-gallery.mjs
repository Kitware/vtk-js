// This script generates examples-list.js for the docs examples gallery
import fs from 'fs/promises';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Adjust these paths as needed
const EXAMPLES_ROOT = path.resolve(__dirname, '../../Sources/');
const OUTPUT_FILE = path.join(__dirname, '../examples/gallery.js');

async function hasScreenshot(screenshotPath) {
  try {
    await fs.access(screenshotPath);
    return true;
  } catch (e) {
    return false;
  }
}

async function walkExamples(dir, category = null, results = []) {
  const entries = await fs.readdir(dir, { withFileTypes: true });
  await Promise.all(
    entries.map(async (entry) => {
      const fullPath = path.join(dir, entry.name);
      if (entry.isDirectory()) {
        await walkExamples(fullPath, category || entry.name, results);
      } else if (entry.name === 'index.js') {
        // Only include if path matches /example/index.js$/
        const relPath = path
          .relative(EXAMPLES_ROOT, fullPath)
          .replace(/\\/g, '/');
        if (!/example\/index\.js$/.test(relPath)) return;
        // Example name is the parent directory
        const exampleName = path.basename(path.dirname(path.dirname(fullPath)));
        const exampleCategory = category || 'Uncategorized';
        // Screenshot convention: check for /gallery/${exampleName}.{png,jpg,gif} or /gallery/${exampleName}WithIcon.{png,jpg,gif} in public/gallery
        const galleryDir = path.resolve(__dirname, '../public/gallery');
        let image = null;
        const exts = ['png', 'jpg', 'gif'];
        const candidates = exts.flatMap((ext) => [
          `/gallery/${exampleName}.${ext}`,
          `/gallery/${exampleName}WithIcon.${ext}`,
        ]);
        // Check all candidates in parallel
        const existsArr = await Promise.all(
          candidates.map((imgPath) => {
            const absPath = path.join(
              galleryDir,
              imgPath.replace('/gallery/', '')
            );
            return hasScreenshot(absPath);
          })
        );
        const foundIdx = existsArr.findIndex(Boolean);
        if (foundIdx !== -1) {
          image = candidates[foundIdx];
        }
        // Link convention
        const link = `/examples/${exampleName}.md`;
        results.push({
          title: exampleName,
          category: exampleCategory,
          image,
          link,
        });
      }
    })
  );
  return results;
}

async function main() {
  const examples = await walkExamples(EXAMPLES_ROOT);
  const content =
    `// This file is auto-generated by generate-examples-list.js\n` +
    `export default ${JSON.stringify(examples, null, 2)};\n`;
  await fs.writeFile(OUTPUT_FILE, content);
  console.log(`Generated ${OUTPUT_FILE} with ${examples.length} examples.`);
}

main();
