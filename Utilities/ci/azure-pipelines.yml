trigger:
- master

jobs:

- job: 'BuildTest'
  displayName: 'Build and test'

  strategy:
    matrix:
      LinuxNode8:
        nodeVersion: '8'
      LinuxNode10:
        nodeVersion: '10'

  pool:
    name: 'Hosted Ubuntu 1604'
    imageName: 'ubuntu-16.04'

  steps:
  - task: NodeTool@0
    inputs:
      versionSpec: '$(nodeVersion).x'
    displayName: 'Install Node.js'

  - script: |
      npm ci
      npm run build:release
    displayName: 'Build'

  - bash: |
      # Allow writing test/output.html
      sudo chmod 777 test
      # Allow writing Documentation/content/coverage/tests.md
      sudo chmod 777 Documentation/content/coverage
      # Allow writing Utilities/TestResults/TESTS-*.xml
      sudo chmod 777 Utilities/
      # To debug, run `./Utilities/ci/run-tests-in-docker.sh -d`
      ./Utilities/ci/run-tests-in-docker.sh
    displayName: 'Test'

  - task: PublishTestResults@2
    condition: succeededOrFailed()
    inputs:
      testRunner: JUnit
      testResultsFiles: 'Utilities/TestResults/TESTS-*.xml'

- job: 'Build'
  displayName: 'Build'

  strategy:
    matrix:
      macOSNode8:
        poolName: 'Hosted macOS'
        imageName: 'macos-10.13'
        nodeVersion: '8'
      macOSNode10:
        poolName: 'Hosted macOS'
        imageName: 'macos-10.13'
        nodeVersion: '10'
      WindowsNode8:
        poolName: 'Hosted VS2017'
        imageName: 'vs2017-win2016'
        nodeVersion: '8'
      WindowsNode10:
        poolName: 'Hosted VS2017'
        imageName: 'vs2017-win2016'
        nodeVersion: '10'

  pool:
    name: '$(poolName)'
    imageName: '$(imageName)'

  steps:
  - task: NodeTool@0
    inputs:
      versionSpec: '$(nodeVersion).x'
    displayName: 'Install Node.js'

  - script: |
      npm ci
      npm run build:release
    displayName: 'Build'
